// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ivcp.proto

#include "ivcp.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace ivc {
template <typename>
PROTOBUF_CONSTEXPR RpcReqData::RpcReqData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RpcReqDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcReqDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcReqDataDefaultTypeInternal() {}
  union {
    RpcReqData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcReqDataDefaultTypeInternal _RpcReqData_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RpcResData::RpcResData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RpcResDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcResDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcResDataDefaultTypeInternal() {}
  union {
    RpcResData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcResDataDefaultTypeInternal _RpcResData_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR StreamReqData::StreamReqData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.deviceid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamReqDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamReqDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamReqDataDefaultTypeInternal() {}
  union {
    StreamReqData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamReqDataDefaultTypeInternal _StreamReqData_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR StreamResData::StreamResData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.msg_type_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamResDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamResDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamResDataDefaultTypeInternal() {}
  union {
    StreamResData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamResDataDefaultTypeInternal _StreamResData_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ImageDataReqData::ImageDataReqData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.imageid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.data_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImageDataReqDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageDataReqDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageDataReqDataDefaultTypeInternal() {}
  union {
    ImageDataReqData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageDataReqDataDefaultTypeInternal _ImageDataReqData_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ImageDataResData::ImageDataResData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.imageid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.data_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImageDataResDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageDataResDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageDataResDataDefaultTypeInternal() {}
  union {
    ImageDataResData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageDataResDataDefaultTypeInternal _ImageDataResData_default_instance_;
}  // namespace ivc
static ::_pb::Metadata file_level_metadata_ivcp_2eproto[6];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_ivcp_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_ivcp_2eproto = nullptr;
const ::uint32_t TableStruct_ivcp_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ivc::RpcReqData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ivc::RpcReqData, _impl_.data_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ivc::RpcResData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ivc::RpcResData, _impl_.data_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ivc::StreamReqData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ivc::StreamReqData, _impl_.deviceid_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ivc::StreamResData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ivc::StreamResData, _impl_.msg_type_),
    PROTOBUF_FIELD_OFFSET(::ivc::StreamResData, _impl_.data_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ivc::ImageDataReqData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ivc::ImageDataReqData, _impl_.imageid_),
    PROTOBUF_FIELD_OFFSET(::ivc::ImageDataReqData, _impl_.data_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ivc::ImageDataResData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ivc::ImageDataResData, _impl_.imageid_),
    PROTOBUF_FIELD_OFFSET(::ivc::ImageDataResData, _impl_.data_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::ivc::RpcReqData)},
        { 9, -1, -1, sizeof(::ivc::RpcResData)},
        { 18, -1, -1, sizeof(::ivc::StreamReqData)},
        { 27, -1, -1, sizeof(::ivc::StreamResData)},
        { 37, -1, -1, sizeof(::ivc::ImageDataReqData)},
        { 47, -1, -1, sizeof(::ivc::ImageDataResData)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::ivc::_RpcReqData_default_instance_._instance,
    &::ivc::_RpcResData_default_instance_._instance,
    &::ivc::_StreamReqData_default_instance_._instance,
    &::ivc::_StreamResData_default_instance_._instance,
    &::ivc::_ImageDataReqData_default_instance_._instance,
    &::ivc::_ImageDataResData_default_instance_._instance,
};
const char descriptor_table_protodef_ivcp_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\nivcp.proto\022\003ivc\"\032\n\nRpcReqData\022\014\n\004data\030"
    "\002 \001(\014\"\032\n\nRpcResData\022\014\n\004data\030\002 \001(\014\"!\n\rStr"
    "eamReqData\022\020\n\010DeviceID\030\001 \001(\t\"/\n\rStreamRe"
    "sData\022\020\n\010msg_type\030\001 \001(\005\022\014\n\004data\030\002 \001(\014\"1\n"
    "\020ImageDataReqData\022\017\n\007ImageId\030\001 \001(\t\022\014\n\004da"
    "ta\030\002 \001(\014\"1\n\020ImageDataResData\022\017\n\007ImageId\030"
    "\001 \001(\t\022\014\n\004data\030\002 \001(\0142\202\n\n\004ivcp\0225\n\017IvcpGetS"
    "vrIpMsg\022\017.ivc.RpcReqData\032\017.ivc.RpcResDat"
    "a\"\000\0225\n\017IvcpRegisterMsg\022\017.ivc.RpcReqData\032"
    "\017.ivc.RpcResData\"\000\0227\n\021IvcpUnRegisterMsg\022"
    "\017.ivc.RpcReqData\032\017.ivc.RpcResData\"\000\0226\n\020I"
    "vcpKeepAliveMsg\022\017.ivc.RpcReqData\032\017.ivc.R"
    "pcResData\"\000\0226\n\020IvcpGetNewSecMsg\022\017.ivc.Rp"
    "cReqData\032\017.ivc.RpcResData\"\000\022@\n\032IvcpUploa"
    "dImageMedaDataMsg\022\017.ivc.RpcReqData\032\017.ivc"
    ".RpcResData\"\000\022E\n\037IvcpUploadVideoSliceMet"
    "aDataMsg\022\017.ivc.RpcReqData\032\017.ivc.RpcResDa"
    "ta\"\000\022:\n\024IvcpReportNatInfoMsg\022\017.ivc.RpcRe"
    "qData\032\017.ivc.RpcResData\"\000\022>\n\030IvcpRspDevic"
    "eBaseInfoMsg\022\017.ivc.RpcReqData\032\017.ivc.RpcR"
    "esData\"\000\022A\n\033IvcpRspDeviceChannelInfoMsg\022"
    "\017.ivc.RpcReqData\032\017.ivc.RpcResData\"\000\022\?\n\031I"
    "vcpRspDeviceVideoInfoMsg\022\017.ivc.RpcReqDat"
    "a\032\017.ivc.RpcResData\"\000\022@\n\032IvcpRspDeviceRec"
    "ordInfoMsg\022\017.ivc.RpcReqData\032\017.ivc.RpcRes"
    "Data\"\000\022D\n\036IvcpRspModifyDeviceBaseInfoMsg"
    "\022\017.ivc.RpcReqData\032\017.ivc.RpcResData\"\000\022E\n\037"
    "IvcpRspModifyDeviceVideoInfoMsg\022\017.ivc.Rp"
    "cReqData\032\017.ivc.RpcResData\"\000\022F\n IvcpRspMo"
    "difyDeviceRecordInfoMsg\022\017.ivc.RpcReqData"
    "\032\017.ivc.RpcResData\"\000\022A\n\033IvcpRspPullStream"
    "ToCloudMsg\022\017.ivc.RpcReqData\032\017.ivc.RpcRes"
    "Data\"\000\022\?\n\031IvcpRspPullStreamToCosMsg\022\017.iv"
    "c.RpcReqData\032\017.ivc.RpcResData\"\000\022>\n\030IvcpR"
    "spGetVersionInfoMsg\022\017.ivc.RpcReqData\032\017.i"
    "vc.RpcResData\"\000\022A\n\033IvcpRspUpdateVersionI"
    "nfoMsg\022\017.ivc.RpcReqData\032\017.ivc.RpcResData"
    "\"\000\022<\n\016IvcpPollingMsg\022\022.ivc.StreamReqData"
    "\032\022.ivc.StreamResData\"\0000\001B\030Z\026../servicePb"
    ";IvcpRpcPbb\006proto3"
};
static ::absl::once_flag descriptor_table_ivcp_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ivcp_2eproto = {
    false,
    false,
    1578,
    descriptor_table_protodef_ivcp_2eproto,
    "ivcp.proto",
    &descriptor_table_ivcp_2eproto_once,
    nullptr,
    0,
    6,
    schemas,
    file_default_instances,
    TableStruct_ivcp_2eproto::offsets,
    file_level_metadata_ivcp_2eproto,
    file_level_enum_descriptors_ivcp_2eproto,
    file_level_service_descriptors_ivcp_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ivcp_2eproto_getter() {
  return &descriptor_table_ivcp_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ivcp_2eproto(&descriptor_table_ivcp_2eproto);
namespace ivc {
// ===================================================================

class RpcReqData::_Internal {
 public:
};

RpcReqData::RpcReqData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ivc.RpcReqData)
}
RpcReqData::RpcReqData(const RpcReqData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RpcReqData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ivc.RpcReqData)
}

inline void RpcReqData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RpcReqData::~RpcReqData() {
  // @@protoc_insertion_point(destructor:ivc.RpcReqData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RpcReqData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void RpcReqData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RpcReqData::Clear() {
// @@protoc_insertion_point(message_clear_start:ivc.RpcReqData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RpcReqData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RpcReqData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ivc.RpcReqData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    const std::string& _s = this->_internal_data();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ivc.RpcReqData)
  return target;
}

::size_t RpcReqData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ivc.RpcReqData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RpcReqData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RpcReqData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RpcReqData::GetClassData() const { return &_class_data_; }


void RpcReqData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RpcReqData*>(&to_msg);
  auto& from = static_cast<const RpcReqData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ivc.RpcReqData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RpcReqData::CopyFrom(const RpcReqData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ivc.RpcReqData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcReqData::IsInitialized() const {
  return true;
}

void RpcReqData::InternalSwap(RpcReqData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, lhs_arena,
                                       &other->_impl_.data_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata RpcReqData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ivcp_2eproto_getter, &descriptor_table_ivcp_2eproto_once,
      file_level_metadata_ivcp_2eproto[0]);
}
// ===================================================================

class RpcResData::_Internal {
 public:
};

RpcResData::RpcResData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ivc.RpcResData)
}
RpcResData::RpcResData(const RpcResData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RpcResData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ivc.RpcResData)
}

inline void RpcResData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RpcResData::~RpcResData() {
  // @@protoc_insertion_point(destructor:ivc.RpcResData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RpcResData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void RpcResData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RpcResData::Clear() {
// @@protoc_insertion_point(message_clear_start:ivc.RpcResData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RpcResData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RpcResData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ivc.RpcResData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    const std::string& _s = this->_internal_data();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ivc.RpcResData)
  return target;
}

::size_t RpcResData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ivc.RpcResData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RpcResData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RpcResData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RpcResData::GetClassData() const { return &_class_data_; }


void RpcResData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RpcResData*>(&to_msg);
  auto& from = static_cast<const RpcResData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ivc.RpcResData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RpcResData::CopyFrom(const RpcResData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ivc.RpcResData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcResData::IsInitialized() const {
  return true;
}

void RpcResData::InternalSwap(RpcResData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, lhs_arena,
                                       &other->_impl_.data_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata RpcResData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ivcp_2eproto_getter, &descriptor_table_ivcp_2eproto_once,
      file_level_metadata_ivcp_2eproto[1]);
}
// ===================================================================

class StreamReqData::_Internal {
 public:
};

StreamReqData::StreamReqData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ivc.StreamReqData)
}
StreamReqData::StreamReqData(const StreamReqData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamReqData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.deviceid_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deviceid().empty()) {
    _this->_impl_.deviceid_.Set(from._internal_deviceid(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ivc.StreamReqData)
}

inline void StreamReqData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.deviceid_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamReqData::~StreamReqData() {
  // @@protoc_insertion_point(destructor:ivc.StreamReqData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamReqData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.deviceid_.Destroy();
}

void StreamReqData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamReqData::Clear() {
// @@protoc_insertion_point(message_clear_start:ivc.StreamReqData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.deviceid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamReqData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string DeviceID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ivc.StreamReqData.DeviceID"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StreamReqData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ivc.StreamReqData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string DeviceID = 1;
  if (!this->_internal_deviceid().empty()) {
    const std::string& _s = this->_internal_deviceid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ivc.StreamReqData.DeviceID");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ivc.StreamReqData)
  return target;
}

::size_t StreamReqData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ivc.StreamReqData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string DeviceID = 1;
  if (!this->_internal_deviceid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_deviceid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamReqData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamReqData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamReqData::GetClassData() const { return &_class_data_; }


void StreamReqData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamReqData*>(&to_msg);
  auto& from = static_cast<const StreamReqData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ivc.StreamReqData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_deviceid().empty()) {
    _this->_internal_set_deviceid(from._internal_deviceid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamReqData::CopyFrom(const StreamReqData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ivc.StreamReqData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamReqData::IsInitialized() const {
  return true;
}

void StreamReqData::InternalSwap(StreamReqData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.deviceid_, lhs_arena,
                                       &other->_impl_.deviceid_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamReqData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ivcp_2eproto_getter, &descriptor_table_ivcp_2eproto_once,
      file_level_metadata_ivcp_2eproto[2]);
}
// ===================================================================

class StreamResData::_Internal {
 public:
};

StreamResData::StreamResData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ivc.StreamResData)
}
StreamResData::StreamResData(const StreamResData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamResData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_) {}

    , decltype(_impl_.msg_type_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), _this->GetArenaForAllocation());
  }
  _this->_impl_.msg_type_ = from._impl_.msg_type_;
  // @@protoc_insertion_point(copy_constructor:ivc.StreamResData)
}

inline void StreamResData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_) {}

    , decltype(_impl_.msg_type_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamResData::~StreamResData() {
  // @@protoc_insertion_point(destructor:ivc.StreamResData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamResData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void StreamResData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamResData::Clear() {
// @@protoc_insertion_point(message_clear_start:ivc.StreamResData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _impl_.msg_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamResData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 msg_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.msg_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StreamResData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ivc.StreamResData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msg_type = 1;
  if (this->_internal_msg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_msg_type(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    const std::string& _s = this->_internal_data();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ivc.StreamResData)
  return target;
}

::size_t StreamResData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ivc.StreamResData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_data());
  }

  // int32 msg_type = 1;
  if (this->_internal_msg_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_msg_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamResData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamResData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamResData::GetClassData() const { return &_class_data_; }


void StreamResData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamResData*>(&to_msg);
  auto& from = static_cast<const StreamResData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ivc.StreamResData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_msg_type() != 0) {
    _this->_internal_set_msg_type(from._internal_msg_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamResData::CopyFrom(const StreamResData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ivc.StreamResData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamResData::IsInitialized() const {
  return true;
}

void StreamResData::InternalSwap(StreamResData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, lhs_arena,
                                       &other->_impl_.data_, rhs_arena);

  swap(_impl_.msg_type_, other->_impl_.msg_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamResData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ivcp_2eproto_getter, &descriptor_table_ivcp_2eproto_once,
      file_level_metadata_ivcp_2eproto[3]);
}
// ===================================================================

class ImageDataReqData::_Internal {
 public:
};

ImageDataReqData::ImageDataReqData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ivc.ImageDataReqData)
}
ImageDataReqData::ImageDataReqData(const ImageDataReqData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImageDataReqData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.imageid_) {}

    , decltype(_impl_.data_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.imageid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.imageid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_imageid().empty()) {
    _this->_impl_.imageid_.Set(from._internal_imageid(), _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ivc.ImageDataReqData)
}

inline void ImageDataReqData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.imageid_) {}

    , decltype(_impl_.data_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.imageid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.imageid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ImageDataReqData::~ImageDataReqData() {
  // @@protoc_insertion_point(destructor:ivc.ImageDataReqData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImageDataReqData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.imageid_.Destroy();
  _impl_.data_.Destroy();
}

void ImageDataReqData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImageDataReqData::Clear() {
// @@protoc_insertion_point(message_clear_start:ivc.ImageDataReqData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.imageid_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageDataReqData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ImageId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_imageid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ivc.ImageDataReqData.ImageId"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ImageDataReqData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ivc.ImageDataReqData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ImageId = 1;
  if (!this->_internal_imageid().empty()) {
    const std::string& _s = this->_internal_imageid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ivc.ImageDataReqData.ImageId");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    const std::string& _s = this->_internal_data();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ivc.ImageDataReqData)
  return target;
}

::size_t ImageDataReqData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ivc.ImageDataReqData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ImageId = 1;
  if (!this->_internal_imageid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_imageid());
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImageDataReqData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImageDataReqData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImageDataReqData::GetClassData() const { return &_class_data_; }


void ImageDataReqData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImageDataReqData*>(&to_msg);
  auto& from = static_cast<const ImageDataReqData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ivc.ImageDataReqData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_imageid().empty()) {
    _this->_internal_set_imageid(from._internal_imageid());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImageDataReqData::CopyFrom(const ImageDataReqData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ivc.ImageDataReqData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageDataReqData::IsInitialized() const {
  return true;
}

void ImageDataReqData::InternalSwap(ImageDataReqData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.imageid_, lhs_arena,
                                       &other->_impl_.imageid_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, lhs_arena,
                                       &other->_impl_.data_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageDataReqData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ivcp_2eproto_getter, &descriptor_table_ivcp_2eproto_once,
      file_level_metadata_ivcp_2eproto[4]);
}
// ===================================================================

class ImageDataResData::_Internal {
 public:
};

ImageDataResData::ImageDataResData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ivc.ImageDataResData)
}
ImageDataResData::ImageDataResData(const ImageDataResData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImageDataResData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.imageid_) {}

    , decltype(_impl_.data_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.imageid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.imageid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_imageid().empty()) {
    _this->_impl_.imageid_.Set(from._internal_imageid(), _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ivc.ImageDataResData)
}

inline void ImageDataResData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.imageid_) {}

    , decltype(_impl_.data_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.imageid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.imageid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ImageDataResData::~ImageDataResData() {
  // @@protoc_insertion_point(destructor:ivc.ImageDataResData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImageDataResData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.imageid_.Destroy();
  _impl_.data_.Destroy();
}

void ImageDataResData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImageDataResData::Clear() {
// @@protoc_insertion_point(message_clear_start:ivc.ImageDataResData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.imageid_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageDataResData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ImageId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_imageid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ivc.ImageDataResData.ImageId"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ImageDataResData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ivc.ImageDataResData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ImageId = 1;
  if (!this->_internal_imageid().empty()) {
    const std::string& _s = this->_internal_imageid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ivc.ImageDataResData.ImageId");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    const std::string& _s = this->_internal_data();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ivc.ImageDataResData)
  return target;
}

::size_t ImageDataResData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ivc.ImageDataResData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ImageId = 1;
  if (!this->_internal_imageid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_imageid());
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImageDataResData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImageDataResData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImageDataResData::GetClassData() const { return &_class_data_; }


void ImageDataResData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImageDataResData*>(&to_msg);
  auto& from = static_cast<const ImageDataResData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ivc.ImageDataResData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_imageid().empty()) {
    _this->_internal_set_imageid(from._internal_imageid());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImageDataResData::CopyFrom(const ImageDataResData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ivc.ImageDataResData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageDataResData::IsInitialized() const {
  return true;
}

void ImageDataResData::InternalSwap(ImageDataResData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.imageid_, lhs_arena,
                                       &other->_impl_.imageid_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, lhs_arena,
                                       &other->_impl_.data_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageDataResData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ivcp_2eproto_getter, &descriptor_table_ivcp_2eproto_once,
      file_level_metadata_ivcp_2eproto[5]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace ivc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ivc::RpcReqData*
Arena::CreateMaybeMessage< ::ivc::RpcReqData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ivc::RpcReqData >(arena);
}
template<> PROTOBUF_NOINLINE ::ivc::RpcResData*
Arena::CreateMaybeMessage< ::ivc::RpcResData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ivc::RpcResData >(arena);
}
template<> PROTOBUF_NOINLINE ::ivc::StreamReqData*
Arena::CreateMaybeMessage< ::ivc::StreamReqData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ivc::StreamReqData >(arena);
}
template<> PROTOBUF_NOINLINE ::ivc::StreamResData*
Arena::CreateMaybeMessage< ::ivc::StreamResData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ivc::StreamResData >(arena);
}
template<> PROTOBUF_NOINLINE ::ivc::ImageDataReqData*
Arena::CreateMaybeMessage< ::ivc::ImageDataReqData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ivc::ImageDataReqData >(arena);
}
template<> PROTOBUF_NOINLINE ::ivc::ImageDataResData*
Arena::CreateMaybeMessage< ::ivc::ImageDataResData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ivc::ImageDataResData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
