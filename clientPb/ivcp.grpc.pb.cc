// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ivcp.proto

#include "ivcp.pb.h"
#include "ivcp.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace ivc {

static const char* ivcp_method_names[] = {
  "/ivc.ivcp/IvcpGetSvrIpMsg",
  "/ivc.ivcp/IvcpRegisterMsg",
  "/ivc.ivcp/IvcpUnRegisterMsg",
  "/ivc.ivcp/IvcpKeepAliveMsg",
  "/ivc.ivcp/IvcpGetNewSecMsg",
  "/ivc.ivcp/IvcpUploadImageMedaDataMsg",
  "/ivc.ivcp/IvcpUploadVideoSliceMetaDataMsg",
  "/ivc.ivcp/IvcpReportNatInfoMsg",
  "/ivc.ivcp/IvcpRspDeviceBaseInfoMsg",
  "/ivc.ivcp/IvcpRspDeviceChannelInfoMsg",
  "/ivc.ivcp/IvcpRspDeviceVideoInfoMsg",
  "/ivc.ivcp/IvcpRspDeviceRecordInfoMsg",
  "/ivc.ivcp/IvcpRspModifyDeviceBaseInfoMsg",
  "/ivc.ivcp/IvcpRspModifyDeviceVideoInfoMsg",
  "/ivc.ivcp/IvcpRspModifyDeviceRecordInfoMsg",
  "/ivc.ivcp/IvcpRspPullStreamToCloudMsg",
  "/ivc.ivcp/IvcpRspPullStreamToCosMsg",
  "/ivc.ivcp/IvcpRspGetVersionInfoMsg",
  "/ivc.ivcp/IvcpRspUpdateVersionInfoMsg",
  "/ivc.ivcp/IvcpPollingMsg",
};

std::unique_ptr< ivcp::Stub> ivcp::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ivcp::Stub> stub(new ivcp::Stub(channel, options));
  return stub;
}

ivcp::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_IvcpGetSvrIpMsg_(ivcp_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IvcpRegisterMsg_(ivcp_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IvcpUnRegisterMsg_(ivcp_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IvcpKeepAliveMsg_(ivcp_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IvcpGetNewSecMsg_(ivcp_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IvcpUploadImageMedaDataMsg_(ivcp_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IvcpUploadVideoSliceMetaDataMsg_(ivcp_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IvcpReportNatInfoMsg_(ivcp_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IvcpRspDeviceBaseInfoMsg_(ivcp_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IvcpRspDeviceChannelInfoMsg_(ivcp_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IvcpRspDeviceVideoInfoMsg_(ivcp_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IvcpRspDeviceRecordInfoMsg_(ivcp_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IvcpRspModifyDeviceBaseInfoMsg_(ivcp_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IvcpRspModifyDeviceVideoInfoMsg_(ivcp_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IvcpRspModifyDeviceRecordInfoMsg_(ivcp_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IvcpRspPullStreamToCloudMsg_(ivcp_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IvcpRspPullStreamToCosMsg_(ivcp_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IvcpRspGetVersionInfoMsg_(ivcp_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IvcpRspUpdateVersionInfoMsg_(ivcp_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IvcpPollingMsg_(ivcp_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status ivcp::Stub::IvcpGetSvrIpMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::ivc::RpcResData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IvcpGetSvrIpMsg_, context, request, response);
}

void ivcp::Stub::async::IvcpGetSvrIpMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IvcpGetSvrIpMsg_, context, request, response, std::move(f));
}

void ivcp::Stub::async::IvcpGetSvrIpMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IvcpGetSvrIpMsg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ivc::RpcResData>* ivcp::Stub::PrepareAsyncIvcpGetSvrIpMsgRaw(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ivc::RpcResData, ::ivc::RpcReqData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IvcpGetSvrIpMsg_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ivc::RpcResData>* ivcp::Stub::AsyncIvcpGetSvrIpMsgRaw(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIvcpGetSvrIpMsgRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ivcp::Stub::IvcpRegisterMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::ivc::RpcResData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IvcpRegisterMsg_, context, request, response);
}

void ivcp::Stub::async::IvcpRegisterMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IvcpRegisterMsg_, context, request, response, std::move(f));
}

void ivcp::Stub::async::IvcpRegisterMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IvcpRegisterMsg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ivc::RpcResData>* ivcp::Stub::PrepareAsyncIvcpRegisterMsgRaw(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ivc::RpcResData, ::ivc::RpcReqData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IvcpRegisterMsg_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ivc::RpcResData>* ivcp::Stub::AsyncIvcpRegisterMsgRaw(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIvcpRegisterMsgRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ivcp::Stub::IvcpUnRegisterMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::ivc::RpcResData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IvcpUnRegisterMsg_, context, request, response);
}

void ivcp::Stub::async::IvcpUnRegisterMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IvcpUnRegisterMsg_, context, request, response, std::move(f));
}

void ivcp::Stub::async::IvcpUnRegisterMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IvcpUnRegisterMsg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ivc::RpcResData>* ivcp::Stub::PrepareAsyncIvcpUnRegisterMsgRaw(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ivc::RpcResData, ::ivc::RpcReqData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IvcpUnRegisterMsg_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ivc::RpcResData>* ivcp::Stub::AsyncIvcpUnRegisterMsgRaw(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIvcpUnRegisterMsgRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ivcp::Stub::IvcpKeepAliveMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::ivc::RpcResData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IvcpKeepAliveMsg_, context, request, response);
}

void ivcp::Stub::async::IvcpKeepAliveMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IvcpKeepAliveMsg_, context, request, response, std::move(f));
}

void ivcp::Stub::async::IvcpKeepAliveMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IvcpKeepAliveMsg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ivc::RpcResData>* ivcp::Stub::PrepareAsyncIvcpKeepAliveMsgRaw(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ivc::RpcResData, ::ivc::RpcReqData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IvcpKeepAliveMsg_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ivc::RpcResData>* ivcp::Stub::AsyncIvcpKeepAliveMsgRaw(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIvcpKeepAliveMsgRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ivcp::Stub::IvcpGetNewSecMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::ivc::RpcResData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IvcpGetNewSecMsg_, context, request, response);
}

void ivcp::Stub::async::IvcpGetNewSecMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IvcpGetNewSecMsg_, context, request, response, std::move(f));
}

void ivcp::Stub::async::IvcpGetNewSecMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IvcpGetNewSecMsg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ivc::RpcResData>* ivcp::Stub::PrepareAsyncIvcpGetNewSecMsgRaw(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ivc::RpcResData, ::ivc::RpcReqData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IvcpGetNewSecMsg_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ivc::RpcResData>* ivcp::Stub::AsyncIvcpGetNewSecMsgRaw(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIvcpGetNewSecMsgRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ivcp::Stub::IvcpUploadImageMedaDataMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::ivc::RpcResData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IvcpUploadImageMedaDataMsg_, context, request, response);
}

void ivcp::Stub::async::IvcpUploadImageMedaDataMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IvcpUploadImageMedaDataMsg_, context, request, response, std::move(f));
}

void ivcp::Stub::async::IvcpUploadImageMedaDataMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IvcpUploadImageMedaDataMsg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ivc::RpcResData>* ivcp::Stub::PrepareAsyncIvcpUploadImageMedaDataMsgRaw(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ivc::RpcResData, ::ivc::RpcReqData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IvcpUploadImageMedaDataMsg_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ivc::RpcResData>* ivcp::Stub::AsyncIvcpUploadImageMedaDataMsgRaw(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIvcpUploadImageMedaDataMsgRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ivcp::Stub::IvcpUploadVideoSliceMetaDataMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::ivc::RpcResData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IvcpUploadVideoSliceMetaDataMsg_, context, request, response);
}

void ivcp::Stub::async::IvcpUploadVideoSliceMetaDataMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IvcpUploadVideoSliceMetaDataMsg_, context, request, response, std::move(f));
}

void ivcp::Stub::async::IvcpUploadVideoSliceMetaDataMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IvcpUploadVideoSliceMetaDataMsg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ivc::RpcResData>* ivcp::Stub::PrepareAsyncIvcpUploadVideoSliceMetaDataMsgRaw(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ivc::RpcResData, ::ivc::RpcReqData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IvcpUploadVideoSliceMetaDataMsg_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ivc::RpcResData>* ivcp::Stub::AsyncIvcpUploadVideoSliceMetaDataMsgRaw(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIvcpUploadVideoSliceMetaDataMsgRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ivcp::Stub::IvcpReportNatInfoMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::ivc::RpcResData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IvcpReportNatInfoMsg_, context, request, response);
}

void ivcp::Stub::async::IvcpReportNatInfoMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IvcpReportNatInfoMsg_, context, request, response, std::move(f));
}

void ivcp::Stub::async::IvcpReportNatInfoMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IvcpReportNatInfoMsg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ivc::RpcResData>* ivcp::Stub::PrepareAsyncIvcpReportNatInfoMsgRaw(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ivc::RpcResData, ::ivc::RpcReqData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IvcpReportNatInfoMsg_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ivc::RpcResData>* ivcp::Stub::AsyncIvcpReportNatInfoMsgRaw(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIvcpReportNatInfoMsgRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ivcp::Stub::IvcpRspDeviceBaseInfoMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::ivc::RpcResData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IvcpRspDeviceBaseInfoMsg_, context, request, response);
}

void ivcp::Stub::async::IvcpRspDeviceBaseInfoMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IvcpRspDeviceBaseInfoMsg_, context, request, response, std::move(f));
}

void ivcp::Stub::async::IvcpRspDeviceBaseInfoMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IvcpRspDeviceBaseInfoMsg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ivc::RpcResData>* ivcp::Stub::PrepareAsyncIvcpRspDeviceBaseInfoMsgRaw(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ivc::RpcResData, ::ivc::RpcReqData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IvcpRspDeviceBaseInfoMsg_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ivc::RpcResData>* ivcp::Stub::AsyncIvcpRspDeviceBaseInfoMsgRaw(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIvcpRspDeviceBaseInfoMsgRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ivcp::Stub::IvcpRspDeviceChannelInfoMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::ivc::RpcResData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IvcpRspDeviceChannelInfoMsg_, context, request, response);
}

void ivcp::Stub::async::IvcpRspDeviceChannelInfoMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IvcpRspDeviceChannelInfoMsg_, context, request, response, std::move(f));
}

void ivcp::Stub::async::IvcpRspDeviceChannelInfoMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IvcpRspDeviceChannelInfoMsg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ivc::RpcResData>* ivcp::Stub::PrepareAsyncIvcpRspDeviceChannelInfoMsgRaw(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ivc::RpcResData, ::ivc::RpcReqData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IvcpRspDeviceChannelInfoMsg_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ivc::RpcResData>* ivcp::Stub::AsyncIvcpRspDeviceChannelInfoMsgRaw(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIvcpRspDeviceChannelInfoMsgRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ivcp::Stub::IvcpRspDeviceVideoInfoMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::ivc::RpcResData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IvcpRspDeviceVideoInfoMsg_, context, request, response);
}

void ivcp::Stub::async::IvcpRspDeviceVideoInfoMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IvcpRspDeviceVideoInfoMsg_, context, request, response, std::move(f));
}

void ivcp::Stub::async::IvcpRspDeviceVideoInfoMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IvcpRspDeviceVideoInfoMsg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ivc::RpcResData>* ivcp::Stub::PrepareAsyncIvcpRspDeviceVideoInfoMsgRaw(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ivc::RpcResData, ::ivc::RpcReqData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IvcpRspDeviceVideoInfoMsg_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ivc::RpcResData>* ivcp::Stub::AsyncIvcpRspDeviceVideoInfoMsgRaw(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIvcpRspDeviceVideoInfoMsgRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ivcp::Stub::IvcpRspDeviceRecordInfoMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::ivc::RpcResData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IvcpRspDeviceRecordInfoMsg_, context, request, response);
}

void ivcp::Stub::async::IvcpRspDeviceRecordInfoMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IvcpRspDeviceRecordInfoMsg_, context, request, response, std::move(f));
}

void ivcp::Stub::async::IvcpRspDeviceRecordInfoMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IvcpRspDeviceRecordInfoMsg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ivc::RpcResData>* ivcp::Stub::PrepareAsyncIvcpRspDeviceRecordInfoMsgRaw(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ivc::RpcResData, ::ivc::RpcReqData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IvcpRspDeviceRecordInfoMsg_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ivc::RpcResData>* ivcp::Stub::AsyncIvcpRspDeviceRecordInfoMsgRaw(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIvcpRspDeviceRecordInfoMsgRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ivcp::Stub::IvcpRspModifyDeviceBaseInfoMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::ivc::RpcResData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IvcpRspModifyDeviceBaseInfoMsg_, context, request, response);
}

void ivcp::Stub::async::IvcpRspModifyDeviceBaseInfoMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IvcpRspModifyDeviceBaseInfoMsg_, context, request, response, std::move(f));
}

void ivcp::Stub::async::IvcpRspModifyDeviceBaseInfoMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IvcpRspModifyDeviceBaseInfoMsg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ivc::RpcResData>* ivcp::Stub::PrepareAsyncIvcpRspModifyDeviceBaseInfoMsgRaw(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ivc::RpcResData, ::ivc::RpcReqData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IvcpRspModifyDeviceBaseInfoMsg_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ivc::RpcResData>* ivcp::Stub::AsyncIvcpRspModifyDeviceBaseInfoMsgRaw(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIvcpRspModifyDeviceBaseInfoMsgRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ivcp::Stub::IvcpRspModifyDeviceVideoInfoMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::ivc::RpcResData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IvcpRspModifyDeviceVideoInfoMsg_, context, request, response);
}

void ivcp::Stub::async::IvcpRspModifyDeviceVideoInfoMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IvcpRspModifyDeviceVideoInfoMsg_, context, request, response, std::move(f));
}

void ivcp::Stub::async::IvcpRspModifyDeviceVideoInfoMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IvcpRspModifyDeviceVideoInfoMsg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ivc::RpcResData>* ivcp::Stub::PrepareAsyncIvcpRspModifyDeviceVideoInfoMsgRaw(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ivc::RpcResData, ::ivc::RpcReqData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IvcpRspModifyDeviceVideoInfoMsg_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ivc::RpcResData>* ivcp::Stub::AsyncIvcpRspModifyDeviceVideoInfoMsgRaw(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIvcpRspModifyDeviceVideoInfoMsgRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ivcp::Stub::IvcpRspModifyDeviceRecordInfoMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::ivc::RpcResData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IvcpRspModifyDeviceRecordInfoMsg_, context, request, response);
}

void ivcp::Stub::async::IvcpRspModifyDeviceRecordInfoMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IvcpRspModifyDeviceRecordInfoMsg_, context, request, response, std::move(f));
}

void ivcp::Stub::async::IvcpRspModifyDeviceRecordInfoMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IvcpRspModifyDeviceRecordInfoMsg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ivc::RpcResData>* ivcp::Stub::PrepareAsyncIvcpRspModifyDeviceRecordInfoMsgRaw(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ivc::RpcResData, ::ivc::RpcReqData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IvcpRspModifyDeviceRecordInfoMsg_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ivc::RpcResData>* ivcp::Stub::AsyncIvcpRspModifyDeviceRecordInfoMsgRaw(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIvcpRspModifyDeviceRecordInfoMsgRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ivcp::Stub::IvcpRspPullStreamToCloudMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::ivc::RpcResData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IvcpRspPullStreamToCloudMsg_, context, request, response);
}

void ivcp::Stub::async::IvcpRspPullStreamToCloudMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IvcpRspPullStreamToCloudMsg_, context, request, response, std::move(f));
}

void ivcp::Stub::async::IvcpRspPullStreamToCloudMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IvcpRspPullStreamToCloudMsg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ivc::RpcResData>* ivcp::Stub::PrepareAsyncIvcpRspPullStreamToCloudMsgRaw(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ivc::RpcResData, ::ivc::RpcReqData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IvcpRspPullStreamToCloudMsg_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ivc::RpcResData>* ivcp::Stub::AsyncIvcpRspPullStreamToCloudMsgRaw(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIvcpRspPullStreamToCloudMsgRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ivcp::Stub::IvcpRspPullStreamToCosMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::ivc::RpcResData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IvcpRspPullStreamToCosMsg_, context, request, response);
}

void ivcp::Stub::async::IvcpRspPullStreamToCosMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IvcpRspPullStreamToCosMsg_, context, request, response, std::move(f));
}

void ivcp::Stub::async::IvcpRspPullStreamToCosMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IvcpRspPullStreamToCosMsg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ivc::RpcResData>* ivcp::Stub::PrepareAsyncIvcpRspPullStreamToCosMsgRaw(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ivc::RpcResData, ::ivc::RpcReqData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IvcpRspPullStreamToCosMsg_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ivc::RpcResData>* ivcp::Stub::AsyncIvcpRspPullStreamToCosMsgRaw(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIvcpRspPullStreamToCosMsgRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ivcp::Stub::IvcpRspGetVersionInfoMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::ivc::RpcResData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IvcpRspGetVersionInfoMsg_, context, request, response);
}

void ivcp::Stub::async::IvcpRspGetVersionInfoMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IvcpRspGetVersionInfoMsg_, context, request, response, std::move(f));
}

void ivcp::Stub::async::IvcpRspGetVersionInfoMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IvcpRspGetVersionInfoMsg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ivc::RpcResData>* ivcp::Stub::PrepareAsyncIvcpRspGetVersionInfoMsgRaw(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ivc::RpcResData, ::ivc::RpcReqData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IvcpRspGetVersionInfoMsg_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ivc::RpcResData>* ivcp::Stub::AsyncIvcpRspGetVersionInfoMsgRaw(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIvcpRspGetVersionInfoMsgRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ivcp::Stub::IvcpRspUpdateVersionInfoMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::ivc::RpcResData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IvcpRspUpdateVersionInfoMsg_, context, request, response);
}

void ivcp::Stub::async::IvcpRspUpdateVersionInfoMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IvcpRspUpdateVersionInfoMsg_, context, request, response, std::move(f));
}

void ivcp::Stub::async::IvcpRspUpdateVersionInfoMsg(::grpc::ClientContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IvcpRspUpdateVersionInfoMsg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ivc::RpcResData>* ivcp::Stub::PrepareAsyncIvcpRspUpdateVersionInfoMsgRaw(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ivc::RpcResData, ::ivc::RpcReqData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IvcpRspUpdateVersionInfoMsg_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ivc::RpcResData>* ivcp::Stub::AsyncIvcpRspUpdateVersionInfoMsgRaw(::grpc::ClientContext* context, const ::ivc::RpcReqData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIvcpRspUpdateVersionInfoMsgRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::ivc::StreamResData>* ivcp::Stub::IvcpPollingMsgRaw(::grpc::ClientContext* context, const ::ivc::StreamReqData& request) {
  return ::grpc::internal::ClientReaderFactory< ::ivc::StreamResData>::Create(channel_.get(), rpcmethod_IvcpPollingMsg_, context, request);
}

void ivcp::Stub::async::IvcpPollingMsg(::grpc::ClientContext* context, const ::ivc::StreamReqData* request, ::grpc::ClientReadReactor< ::ivc::StreamResData>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::ivc::StreamResData>::Create(stub_->channel_.get(), stub_->rpcmethod_IvcpPollingMsg_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::ivc::StreamResData>* ivcp::Stub::AsyncIvcpPollingMsgRaw(::grpc::ClientContext* context, const ::ivc::StreamReqData& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ivc::StreamResData>::Create(channel_.get(), cq, rpcmethod_IvcpPollingMsg_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::ivc::StreamResData>* ivcp::Stub::PrepareAsyncIvcpPollingMsgRaw(::grpc::ClientContext* context, const ::ivc::StreamReqData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ivc::StreamResData>::Create(channel_.get(), cq, rpcmethod_IvcpPollingMsg_, context, request, false, nullptr);
}

ivcp::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ivcp_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ivcp::Service, ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ivcp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ivc::RpcReqData* req,
             ::ivc::RpcResData* resp) {
               return service->IvcpGetSvrIpMsg(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ivcp_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ivcp::Service, ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ivcp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ivc::RpcReqData* req,
             ::ivc::RpcResData* resp) {
               return service->IvcpRegisterMsg(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ivcp_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ivcp::Service, ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ivcp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ivc::RpcReqData* req,
             ::ivc::RpcResData* resp) {
               return service->IvcpUnRegisterMsg(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ivcp_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ivcp::Service, ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ivcp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ivc::RpcReqData* req,
             ::ivc::RpcResData* resp) {
               return service->IvcpKeepAliveMsg(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ivcp_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ivcp::Service, ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ivcp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ivc::RpcReqData* req,
             ::ivc::RpcResData* resp) {
               return service->IvcpGetNewSecMsg(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ivcp_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ivcp::Service, ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ivcp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ivc::RpcReqData* req,
             ::ivc::RpcResData* resp) {
               return service->IvcpUploadImageMedaDataMsg(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ivcp_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ivcp::Service, ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ivcp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ivc::RpcReqData* req,
             ::ivc::RpcResData* resp) {
               return service->IvcpUploadVideoSliceMetaDataMsg(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ivcp_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ivcp::Service, ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ivcp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ivc::RpcReqData* req,
             ::ivc::RpcResData* resp) {
               return service->IvcpReportNatInfoMsg(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ivcp_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ivcp::Service, ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ivcp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ivc::RpcReqData* req,
             ::ivc::RpcResData* resp) {
               return service->IvcpRspDeviceBaseInfoMsg(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ivcp_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ivcp::Service, ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ivcp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ivc::RpcReqData* req,
             ::ivc::RpcResData* resp) {
               return service->IvcpRspDeviceChannelInfoMsg(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ivcp_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ivcp::Service, ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ivcp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ivc::RpcReqData* req,
             ::ivc::RpcResData* resp) {
               return service->IvcpRspDeviceVideoInfoMsg(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ivcp_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ivcp::Service, ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ivcp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ivc::RpcReqData* req,
             ::ivc::RpcResData* resp) {
               return service->IvcpRspDeviceRecordInfoMsg(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ivcp_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ivcp::Service, ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ivcp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ivc::RpcReqData* req,
             ::ivc::RpcResData* resp) {
               return service->IvcpRspModifyDeviceBaseInfoMsg(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ivcp_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ivcp::Service, ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ivcp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ivc::RpcReqData* req,
             ::ivc::RpcResData* resp) {
               return service->IvcpRspModifyDeviceVideoInfoMsg(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ivcp_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ivcp::Service, ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ivcp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ivc::RpcReqData* req,
             ::ivc::RpcResData* resp) {
               return service->IvcpRspModifyDeviceRecordInfoMsg(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ivcp_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ivcp::Service, ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ivcp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ivc::RpcReqData* req,
             ::ivc::RpcResData* resp) {
               return service->IvcpRspPullStreamToCloudMsg(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ivcp_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ivcp::Service, ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ivcp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ivc::RpcReqData* req,
             ::ivc::RpcResData* resp) {
               return service->IvcpRspPullStreamToCosMsg(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ivcp_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ivcp::Service, ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ivcp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ivc::RpcReqData* req,
             ::ivc::RpcResData* resp) {
               return service->IvcpRspGetVersionInfoMsg(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ivcp_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ivcp::Service, ::ivc::RpcReqData, ::ivc::RpcResData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ivcp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ivc::RpcReqData* req,
             ::ivc::RpcResData* resp) {
               return service->IvcpRspUpdateVersionInfoMsg(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ivcp_method_names[19],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ivcp::Service, ::ivc::StreamReqData, ::ivc::StreamResData>(
          [](ivcp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ivc::StreamReqData* req,
             ::grpc::ServerWriter<::ivc::StreamResData>* writer) {
               return service->IvcpPollingMsg(ctx, req, writer);
             }, this)));
}

ivcp::Service::~Service() {
}

::grpc::Status ivcp::Service::IvcpGetSvrIpMsg(::grpc::ServerContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ivcp::Service::IvcpRegisterMsg(::grpc::ServerContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ivcp::Service::IvcpUnRegisterMsg(::grpc::ServerContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ivcp::Service::IvcpKeepAliveMsg(::grpc::ServerContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ivcp::Service::IvcpGetNewSecMsg(::grpc::ServerContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ivcp::Service::IvcpUploadImageMedaDataMsg(::grpc::ServerContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ivcp::Service::IvcpUploadVideoSliceMetaDataMsg(::grpc::ServerContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ivcp::Service::IvcpReportNatInfoMsg(::grpc::ServerContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ivcp::Service::IvcpRspDeviceBaseInfoMsg(::grpc::ServerContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ivcp::Service::IvcpRspDeviceChannelInfoMsg(::grpc::ServerContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ivcp::Service::IvcpRspDeviceVideoInfoMsg(::grpc::ServerContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ivcp::Service::IvcpRspDeviceRecordInfoMsg(::grpc::ServerContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ivcp::Service::IvcpRspModifyDeviceBaseInfoMsg(::grpc::ServerContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ivcp::Service::IvcpRspModifyDeviceVideoInfoMsg(::grpc::ServerContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ivcp::Service::IvcpRspModifyDeviceRecordInfoMsg(::grpc::ServerContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ivcp::Service::IvcpRspPullStreamToCloudMsg(::grpc::ServerContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ivcp::Service::IvcpRspPullStreamToCosMsg(::grpc::ServerContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ivcp::Service::IvcpRspGetVersionInfoMsg(::grpc::ServerContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ivcp::Service::IvcpRspUpdateVersionInfoMsg(::grpc::ServerContext* context, const ::ivc::RpcReqData* request, ::ivc::RpcResData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ivcp::Service::IvcpPollingMsg(::grpc::ServerContext* context, const ::ivc::StreamReqData* request, ::grpc::ServerWriter< ::ivc::StreamResData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ivc

