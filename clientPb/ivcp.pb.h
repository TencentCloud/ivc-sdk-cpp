// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ivcp.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ivcp_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ivcp_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ivcp_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ivcp_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_ivcp_2eproto;
namespace ivc {
class ImageDataReqData;
struct ImageDataReqDataDefaultTypeInternal;
extern ImageDataReqDataDefaultTypeInternal _ImageDataReqData_default_instance_;
class ImageDataResData;
struct ImageDataResDataDefaultTypeInternal;
extern ImageDataResDataDefaultTypeInternal _ImageDataResData_default_instance_;
class RpcReqData;
struct RpcReqDataDefaultTypeInternal;
extern RpcReqDataDefaultTypeInternal _RpcReqData_default_instance_;
class RpcResData;
struct RpcResDataDefaultTypeInternal;
extern RpcResDataDefaultTypeInternal _RpcResData_default_instance_;
class StreamReqData;
struct StreamReqDataDefaultTypeInternal;
extern StreamReqDataDefaultTypeInternal _StreamReqData_default_instance_;
class StreamResData;
struct StreamResDataDefaultTypeInternal;
extern StreamResDataDefaultTypeInternal _StreamResData_default_instance_;
}  // namespace ivc
PROTOBUF_NAMESPACE_OPEN
template <>
::ivc::ImageDataReqData* Arena::CreateMaybeMessage<::ivc::ImageDataReqData>(Arena*);
template <>
::ivc::ImageDataResData* Arena::CreateMaybeMessage<::ivc::ImageDataResData>(Arena*);
template <>
::ivc::RpcReqData* Arena::CreateMaybeMessage<::ivc::RpcReqData>(Arena*);
template <>
::ivc::RpcResData* Arena::CreateMaybeMessage<::ivc::RpcResData>(Arena*);
template <>
::ivc::StreamReqData* Arena::CreateMaybeMessage<::ivc::StreamReqData>(Arena*);
template <>
::ivc::StreamResData* Arena::CreateMaybeMessage<::ivc::StreamResData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace ivc {

// ===================================================================


// -------------------------------------------------------------------

class RpcReqData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ivc.RpcReqData) */ {
 public:
  inline RpcReqData() : RpcReqData(nullptr) {}
  ~RpcReqData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RpcReqData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcReqData(const RpcReqData& from);
  RpcReqData(RpcReqData&& from) noexcept
    : RpcReqData() {
    *this = ::std::move(from);
  }

  inline RpcReqData& operator=(const RpcReqData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcReqData& operator=(RpcReqData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcReqData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcReqData* internal_default_instance() {
    return reinterpret_cast<const RpcReqData*>(
               &_RpcReqData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RpcReqData& a, RpcReqData& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcReqData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcReqData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcReqData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcReqData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcReqData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RpcReqData& from) {
    RpcReqData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcReqData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ivc.RpcReqData";
  }
  protected:
  explicit RpcReqData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
  };
  // bytes data = 2;
  void clear_data() ;
  const std::string& data() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* ptr);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:ivc.RpcReqData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ivcp_2eproto;
};// -------------------------------------------------------------------

class RpcResData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ivc.RpcResData) */ {
 public:
  inline RpcResData() : RpcResData(nullptr) {}
  ~RpcResData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RpcResData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcResData(const RpcResData& from);
  RpcResData(RpcResData&& from) noexcept
    : RpcResData() {
    *this = ::std::move(from);
  }

  inline RpcResData& operator=(const RpcResData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcResData& operator=(RpcResData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcResData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcResData* internal_default_instance() {
    return reinterpret_cast<const RpcResData*>(
               &_RpcResData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RpcResData& a, RpcResData& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcResData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcResData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcResData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcResData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcResData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RpcResData& from) {
    RpcResData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcResData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ivc.RpcResData";
  }
  protected:
  explicit RpcResData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
  };
  // bytes data = 2;
  void clear_data() ;
  const std::string& data() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* ptr);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:ivc.RpcResData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ivcp_2eproto;
};// -------------------------------------------------------------------

class StreamReqData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ivc.StreamReqData) */ {
 public:
  inline StreamReqData() : StreamReqData(nullptr) {}
  ~StreamReqData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StreamReqData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamReqData(const StreamReqData& from);
  StreamReqData(StreamReqData&& from) noexcept
    : StreamReqData() {
    *this = ::std::move(from);
  }

  inline StreamReqData& operator=(const StreamReqData& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamReqData& operator=(StreamReqData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamReqData& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamReqData* internal_default_instance() {
    return reinterpret_cast<const StreamReqData*>(
               &_StreamReqData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StreamReqData& a, StreamReqData& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamReqData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamReqData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamReqData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamReqData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamReqData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamReqData& from) {
    StreamReqData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamReqData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ivc.StreamReqData";
  }
  protected:
  explicit StreamReqData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIDFieldNumber = 1,
  };
  // string DeviceID = 1;
  void clear_deviceid() ;
  const std::string& deviceid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_deviceid(Arg_&& arg, Args_... args);
  std::string* mutable_deviceid();
  PROTOBUF_NODISCARD std::string* release_deviceid();
  void set_allocated_deviceid(std::string* ptr);

  private:
  const std::string& _internal_deviceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deviceid(
      const std::string& value);
  std::string* _internal_mutable_deviceid();

  public:
  // @@protoc_insertion_point(class_scope:ivc.StreamReqData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ivcp_2eproto;
};// -------------------------------------------------------------------

class StreamResData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ivc.StreamResData) */ {
 public:
  inline StreamResData() : StreamResData(nullptr) {}
  ~StreamResData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StreamResData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamResData(const StreamResData& from);
  StreamResData(StreamResData&& from) noexcept
    : StreamResData() {
    *this = ::std::move(from);
  }

  inline StreamResData& operator=(const StreamResData& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamResData& operator=(StreamResData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamResData& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamResData* internal_default_instance() {
    return reinterpret_cast<const StreamResData*>(
               &_StreamResData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StreamResData& a, StreamResData& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamResData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamResData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamResData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamResData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamResData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamResData& from) {
    StreamResData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamResData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ivc.StreamResData";
  }
  protected:
  explicit StreamResData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kMsgTypeFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data() ;
  const std::string& data() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* ptr);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // int32 msg_type = 1;
  void clear_msg_type() ;
  ::int32_t msg_type() const;
  void set_msg_type(::int32_t value);

  private:
  ::int32_t _internal_msg_type() const;
  void _internal_set_msg_type(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ivc.StreamResData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    ::int32_t msg_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ivcp_2eproto;
};// -------------------------------------------------------------------

class ImageDataReqData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ivc.ImageDataReqData) */ {
 public:
  inline ImageDataReqData() : ImageDataReqData(nullptr) {}
  ~ImageDataReqData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ImageDataReqData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageDataReqData(const ImageDataReqData& from);
  ImageDataReqData(ImageDataReqData&& from) noexcept
    : ImageDataReqData() {
    *this = ::std::move(from);
  }

  inline ImageDataReqData& operator=(const ImageDataReqData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageDataReqData& operator=(ImageDataReqData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageDataReqData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageDataReqData* internal_default_instance() {
    return reinterpret_cast<const ImageDataReqData*>(
               &_ImageDataReqData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ImageDataReqData& a, ImageDataReqData& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageDataReqData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageDataReqData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImageDataReqData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImageDataReqData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImageDataReqData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ImageDataReqData& from) {
    ImageDataReqData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageDataReqData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ivc.ImageDataReqData";
  }
  protected:
  explicit ImageDataReqData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageIdFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // string ImageId = 1;
  void clear_imageid() ;
  const std::string& imageid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_imageid(Arg_&& arg, Args_... args);
  std::string* mutable_imageid();
  PROTOBUF_NODISCARD std::string* release_imageid();
  void set_allocated_imageid(std::string* ptr);

  private:
  const std::string& _internal_imageid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imageid(
      const std::string& value);
  std::string* _internal_mutable_imageid();

  public:
  // bytes data = 2;
  void clear_data() ;
  const std::string& data() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* ptr);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:ivc.ImageDataReqData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imageid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ivcp_2eproto;
};// -------------------------------------------------------------------

class ImageDataResData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ivc.ImageDataResData) */ {
 public:
  inline ImageDataResData() : ImageDataResData(nullptr) {}
  ~ImageDataResData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ImageDataResData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageDataResData(const ImageDataResData& from);
  ImageDataResData(ImageDataResData&& from) noexcept
    : ImageDataResData() {
    *this = ::std::move(from);
  }

  inline ImageDataResData& operator=(const ImageDataResData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageDataResData& operator=(ImageDataResData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageDataResData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageDataResData* internal_default_instance() {
    return reinterpret_cast<const ImageDataResData*>(
               &_ImageDataResData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ImageDataResData& a, ImageDataResData& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageDataResData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageDataResData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImageDataResData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImageDataResData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImageDataResData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ImageDataResData& from) {
    ImageDataResData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageDataResData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ivc.ImageDataResData";
  }
  protected:
  explicit ImageDataResData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageIdFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // string ImageId = 1;
  void clear_imageid() ;
  const std::string& imageid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_imageid(Arg_&& arg, Args_... args);
  std::string* mutable_imageid();
  PROTOBUF_NODISCARD std::string* release_imageid();
  void set_allocated_imageid(std::string* ptr);

  private:
  const std::string& _internal_imageid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imageid(
      const std::string& value);
  std::string* _internal_mutable_imageid();

  public:
  // bytes data = 2;
  void clear_data() ;
  const std::string& data() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* ptr);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:ivc.ImageDataResData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imageid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ivcp_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RpcReqData

// bytes data = 2;
inline void RpcReqData::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& RpcReqData::data() const {
  // @@protoc_insertion_point(field_get:ivc.RpcReqData.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RpcReqData::set_data(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ivc.RpcReqData.data)
}
inline std::string* RpcReqData::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:ivc.RpcReqData.data)
  return _s;
}
inline const std::string& RpcReqData::_internal_data() const {
  return _impl_.data_.Get();
}
inline void RpcReqData::_internal_set_data(const std::string& value) {
  ;


  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcReqData::_internal_mutable_data() {
  ;
  return _impl_.data_.Mutable( GetArenaForAllocation());
}
inline std::string* RpcReqData::release_data() {
  // @@protoc_insertion_point(field_release:ivc.RpcReqData.data)
  return _impl_.data_.Release();
}
inline void RpcReqData::set_allocated_data(std::string* value) {
  _impl_.data_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ivc.RpcReqData.data)
}

// -------------------------------------------------------------------

// RpcResData

// bytes data = 2;
inline void RpcResData::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& RpcResData::data() const {
  // @@protoc_insertion_point(field_get:ivc.RpcResData.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RpcResData::set_data(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ivc.RpcResData.data)
}
inline std::string* RpcResData::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:ivc.RpcResData.data)
  return _s;
}
inline const std::string& RpcResData::_internal_data() const {
  return _impl_.data_.Get();
}
inline void RpcResData::_internal_set_data(const std::string& value) {
  ;


  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcResData::_internal_mutable_data() {
  ;
  return _impl_.data_.Mutable( GetArenaForAllocation());
}
inline std::string* RpcResData::release_data() {
  // @@protoc_insertion_point(field_release:ivc.RpcResData.data)
  return _impl_.data_.Release();
}
inline void RpcResData::set_allocated_data(std::string* value) {
  _impl_.data_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ivc.RpcResData.data)
}

// -------------------------------------------------------------------

// StreamReqData

// string DeviceID = 1;
inline void StreamReqData::clear_deviceid() {
  _impl_.deviceid_.ClearToEmpty();
}
inline const std::string& StreamReqData::deviceid() const {
  // @@protoc_insertion_point(field_get:ivc.StreamReqData.DeviceID)
  return _internal_deviceid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StreamReqData::set_deviceid(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.deviceid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ivc.StreamReqData.DeviceID)
}
inline std::string* StreamReqData::mutable_deviceid() {
  std::string* _s = _internal_mutable_deviceid();
  // @@protoc_insertion_point(field_mutable:ivc.StreamReqData.DeviceID)
  return _s;
}
inline const std::string& StreamReqData::_internal_deviceid() const {
  return _impl_.deviceid_.Get();
}
inline void StreamReqData::_internal_set_deviceid(const std::string& value) {
  ;


  _impl_.deviceid_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamReqData::_internal_mutable_deviceid() {
  ;
  return _impl_.deviceid_.Mutable( GetArenaForAllocation());
}
inline std::string* StreamReqData::release_deviceid() {
  // @@protoc_insertion_point(field_release:ivc.StreamReqData.DeviceID)
  return _impl_.deviceid_.Release();
}
inline void StreamReqData::set_allocated_deviceid(std::string* value) {
  _impl_.deviceid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.deviceid_.IsDefault()) {
          _impl_.deviceid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ivc.StreamReqData.DeviceID)
}

// -------------------------------------------------------------------

// StreamResData

// int32 msg_type = 1;
inline void StreamResData::clear_msg_type() {
  _impl_.msg_type_ = 0;
}
inline ::int32_t StreamResData::msg_type() const {
  // @@protoc_insertion_point(field_get:ivc.StreamResData.msg_type)
  return _internal_msg_type();
}
inline void StreamResData::set_msg_type(::int32_t value) {
  _internal_set_msg_type(value);
  // @@protoc_insertion_point(field_set:ivc.StreamResData.msg_type)
}
inline ::int32_t StreamResData::_internal_msg_type() const {
  return _impl_.msg_type_;
}
inline void StreamResData::_internal_set_msg_type(::int32_t value) {
  ;
  _impl_.msg_type_ = value;
}

// bytes data = 2;
inline void StreamResData::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& StreamResData::data() const {
  // @@protoc_insertion_point(field_get:ivc.StreamResData.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StreamResData::set_data(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ivc.StreamResData.data)
}
inline std::string* StreamResData::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:ivc.StreamResData.data)
  return _s;
}
inline const std::string& StreamResData::_internal_data() const {
  return _impl_.data_.Get();
}
inline void StreamResData::_internal_set_data(const std::string& value) {
  ;


  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamResData::_internal_mutable_data() {
  ;
  return _impl_.data_.Mutable( GetArenaForAllocation());
}
inline std::string* StreamResData::release_data() {
  // @@protoc_insertion_point(field_release:ivc.StreamResData.data)
  return _impl_.data_.Release();
}
inline void StreamResData::set_allocated_data(std::string* value) {
  _impl_.data_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ivc.StreamResData.data)
}

// -------------------------------------------------------------------

// ImageDataReqData

// string ImageId = 1;
inline void ImageDataReqData::clear_imageid() {
  _impl_.imageid_.ClearToEmpty();
}
inline const std::string& ImageDataReqData::imageid() const {
  // @@protoc_insertion_point(field_get:ivc.ImageDataReqData.ImageId)
  return _internal_imageid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ImageDataReqData::set_imageid(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.imageid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ivc.ImageDataReqData.ImageId)
}
inline std::string* ImageDataReqData::mutable_imageid() {
  std::string* _s = _internal_mutable_imageid();
  // @@protoc_insertion_point(field_mutable:ivc.ImageDataReqData.ImageId)
  return _s;
}
inline const std::string& ImageDataReqData::_internal_imageid() const {
  return _impl_.imageid_.Get();
}
inline void ImageDataReqData::_internal_set_imageid(const std::string& value) {
  ;


  _impl_.imageid_.Set(value, GetArenaForAllocation());
}
inline std::string* ImageDataReqData::_internal_mutable_imageid() {
  ;
  return _impl_.imageid_.Mutable( GetArenaForAllocation());
}
inline std::string* ImageDataReqData::release_imageid() {
  // @@protoc_insertion_point(field_release:ivc.ImageDataReqData.ImageId)
  return _impl_.imageid_.Release();
}
inline void ImageDataReqData::set_allocated_imageid(std::string* value) {
  _impl_.imageid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.imageid_.IsDefault()) {
          _impl_.imageid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ivc.ImageDataReqData.ImageId)
}

// bytes data = 2;
inline void ImageDataReqData::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& ImageDataReqData::data() const {
  // @@protoc_insertion_point(field_get:ivc.ImageDataReqData.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ImageDataReqData::set_data(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ivc.ImageDataReqData.data)
}
inline std::string* ImageDataReqData::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:ivc.ImageDataReqData.data)
  return _s;
}
inline const std::string& ImageDataReqData::_internal_data() const {
  return _impl_.data_.Get();
}
inline void ImageDataReqData::_internal_set_data(const std::string& value) {
  ;


  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* ImageDataReqData::_internal_mutable_data() {
  ;
  return _impl_.data_.Mutable( GetArenaForAllocation());
}
inline std::string* ImageDataReqData::release_data() {
  // @@protoc_insertion_point(field_release:ivc.ImageDataReqData.data)
  return _impl_.data_.Release();
}
inline void ImageDataReqData::set_allocated_data(std::string* value) {
  _impl_.data_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ivc.ImageDataReqData.data)
}

// -------------------------------------------------------------------

// ImageDataResData

// string ImageId = 1;
inline void ImageDataResData::clear_imageid() {
  _impl_.imageid_.ClearToEmpty();
}
inline const std::string& ImageDataResData::imageid() const {
  // @@protoc_insertion_point(field_get:ivc.ImageDataResData.ImageId)
  return _internal_imageid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ImageDataResData::set_imageid(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.imageid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ivc.ImageDataResData.ImageId)
}
inline std::string* ImageDataResData::mutable_imageid() {
  std::string* _s = _internal_mutable_imageid();
  // @@protoc_insertion_point(field_mutable:ivc.ImageDataResData.ImageId)
  return _s;
}
inline const std::string& ImageDataResData::_internal_imageid() const {
  return _impl_.imageid_.Get();
}
inline void ImageDataResData::_internal_set_imageid(const std::string& value) {
  ;


  _impl_.imageid_.Set(value, GetArenaForAllocation());
}
inline std::string* ImageDataResData::_internal_mutable_imageid() {
  ;
  return _impl_.imageid_.Mutable( GetArenaForAllocation());
}
inline std::string* ImageDataResData::release_imageid() {
  // @@protoc_insertion_point(field_release:ivc.ImageDataResData.ImageId)
  return _impl_.imageid_.Release();
}
inline void ImageDataResData::set_allocated_imageid(std::string* value) {
  _impl_.imageid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.imageid_.IsDefault()) {
          _impl_.imageid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ivc.ImageDataResData.ImageId)
}

// bytes data = 2;
inline void ImageDataResData::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& ImageDataResData::data() const {
  // @@protoc_insertion_point(field_get:ivc.ImageDataResData.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ImageDataResData::set_data(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ivc.ImageDataResData.data)
}
inline std::string* ImageDataResData::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:ivc.ImageDataResData.data)
  return _s;
}
inline const std::string& ImageDataResData::_internal_data() const {
  return _impl_.data_.Get();
}
inline void ImageDataResData::_internal_set_data(const std::string& value) {
  ;


  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* ImageDataResData::_internal_mutable_data() {
  ;
  return _impl_.data_.Mutable( GetArenaForAllocation());
}
inline std::string* ImageDataResData::release_data() {
  // @@protoc_insertion_point(field_release:ivc.ImageDataResData.data)
  return _impl_.data_.Release();
}
inline void ImageDataResData::set_allocated_data(std::string* value) {
  _impl_.data_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ivc.ImageDataResData.data)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace ivc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ivcp_2eproto_2epb_2eh
